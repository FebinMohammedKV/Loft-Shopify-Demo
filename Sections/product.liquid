{{ 'product.css'| asset_url | stylesheet_tag }}
{{ 'product.js'| asset_url | script_tag }}
{{ 'wishlist.js'| asset_url | script_tag }}

{% comment %} {% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}
<img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
{% for image in product.images %}
  <a href="{{ image.src | img_url: 'large' }}">
    <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
  </a>
{% endfor %}
<h1>{{ product.title }}</h1>
<form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm">
  <select name="id" id="productSelect">
    {% for variant in product.variants %}
      {% if variant.available %}
        <option value="{{ variant.id }}">
          {{ variant.title }} - {{ variant.price | money_with_currency }}
        </option>
      {% else %}
        <option disabled="disabled">
          {{ variant.title }} - sold out
        </option>
      {% endif %}
    {% endfor %}
  </select>
  {{ current_variant.price | money }}
  <label for="Quantity">quantity</label>
  <input type="number" id="Quantity" name="quantity" value="1" min="1">
  <button type="submit" name="add" id="AddToCart">Add to cart</button>
</form>
<div>{{ product.description }}</div> {% endcomment %}

{% style %}
    .product-page {
        padding-top: {{ section.settings.padding_top }}px;
        padding-bottom: {{ section.settings.padding_bottom }}px;
    }
{% endstyle %}

{% assign default_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
<div class="product-page">
  <div class="product-images">
    <img src="{{ default_image | img_url: 'large' }}" alt="{{ default_image.alt | escape }}" id="ProductPhotoImg">
    <div class="product-thumbnails">
      {% for image in product.images %}
        <div class="thumbnail"
          {% if image.alt != default_image.alt %}
            style="display: none;"
          {% endif %}
          data-image="{{ image | img_url: 'large' }}"
          thumbnail-alt="{{ image.alt }}">
          <img src="{{ image | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
        </div>
      {% endfor %}
    </div>
  </div>


  <div class="product-details">
    <nav class="breadcrumb">
      <a href="{{ shop.url }}">Home</a> /
      {% if collection %}
      <a href="{{ collection.url }}">{{ collection.title }}</a> /
      {% endif %}
      <span>{{ product.title }}</span>
    </nav>

    <h1>{{ product.title }}</h1>
    <div class="price-info">
      <p class="product-price">
        <span class="product-price">{{ product.selected_or_first_available_variant.price | money }} exc VAT</span>
        <br>
        {% if product.compare_at_price > product.price %}
          <span> From {{ product.compare_at_price | money }} inc VAT</span>
        {% endif %}
      </p>
      <p class="shipping"><a href="/pages/shipping">Shipping</a> calculated at checkout.</p>
    </div>

    <div class="product-description closed" id="product-description">
      {{ product.description }}
      <span class="show-more">... show more...</span>
    </div>

    <!-- Product Variant Section -->
    {% form 'product', product %}
    <input id="product_id" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
    {% if product.variants.size > 1 %}
      <fieldset class="product-form__options">
        <legend><span>Choose Variants</span></legend>
        {% for option in product.options_with_values %}
          {% if option.name == 'Color' %}
            <p class="variant-title">{{ option.name }}</p>
            <div class="product-form__swatch">
              {% for value in option.values %}
                {% assign variant = product.variants | where: 'option1', value | first %}
                <label class="swatch" for="{{ option.name | handleize }}-{{ value | handleize }}">
                  <input {% if option.selected_value == value %}checked{% endif %} type="radio" name="{{ option.name }}" value="{{ value }}" id="{{ option.name | handleize }}-{{ value | handleize }}" data-image="{{ variant.featured_image | img_url: 'large' }}" data-alt="{{ value }}">
                  <span class="swatch-image" style="background-image: url('{{ variant.featured_image | img_url: 'small' }}');"></span>
                  <span class="swatch-name">{{ value }}</span>
                </label>
              {% endfor %}
            </div>
          {% else %}
          <p class="variant-title">{{ option.name }}</p>
            <div class="product-form__button-options">
              {% for value in option.values %}
                <label class="button-option">
                  <input type="radio" name="{{ option.name }}" value="{{ value }}">
                  <span class="button-label">{{ value }}</span>
                </label>
              {% endfor %}
            </div>
          {% endif %}
        {% endfor %}
        </fieldset>
    {% endif %}

    <div class="quantity-selector">
      <div class="quantity-title">QUANTITY</div>
      <div class="quantity-content">
        <button type="button" class="quantity-btn" onclick="decreaseQuantity()">-</button>
        <input type="text" id="Quantity" name="quantity" value="1" min="1" onchange="updateTotal()">
        <button type="button" class="quantity-btn" onclick="increaseQuantity()">+</button>
      </div>
    </div>

    <div class="total-price">
      <p>Total: <span id="totalPrice">{{ product.selected_or_first_available_variant.price | money }}</span></p>
    </div>
  {% endform %}
    <div id="productSelect">
      {% if product.available %}
        <form action="/cart/add" method="post" class="add-to-cart-form">
          <input type="hidden" name="id" value="{{ variant.id }}">
          <button type="submit" name="add" id="AddToCart">Add to Basket</button>
        </form>
      {% else %}
        <button type="button" name="add" id="AddToCart">Notify Me</button>
      {% endif %}
    </div>
    

    <button class="shopify-pay" style="background-color: #5A31F4;">
      Buy with
      <div class="shopify-pay-img">
        <img src="{{ 'shopPay.png' | asset_url }}" alt="Shopify Pay">
      </div>
    </button>

    {% comment %} <span class="add-to-wishlist wishlist-item" data-id="{{ product.id }}">
      <i class="fa-regular fa-heart" style="color: #ffffff;"></i> &nbsp;
      Add to wishlist
    </span> {% endcomment %}

    <button class="st-wishlist-button" data-type="details" data-handle="{{product.handle}}"></button>

    {% comment %} {% render 'wishlist', productid: product.id %} {% endcomment %}

    <div class="more-payment-options">
      <a href="/checkout">More Payment options</a>
    </div>

    <!-- sections/product-details.liquid -->
    <div class="product-additional-details">
      <div class="detail-headings">
        {% for block in section.blocks %}
          <div class="heading{% if forloop.first %} active{% endif %}" data-block-id="{{ block.id }}">
            <p class="detail-heading">{{ block.settings.detail_heading }}</p>
          </div>
        {% endfor %}
      </div>
      <div class="detail-contents">
        {% for block in section.blocks %}
          <div class="richtext-containers info{% if forloop.first %} active{% endif %}" data-block-id="{{ block.id }}">
            <div style="font-size: {{ block.settings.product_details_fontsize }}px; line-height: {{ block.settings.product_details_lineheight }};">
              {{ block.settings.product_details }}
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>

{% comment %} Similer products {% endcomment %}
{% assign current_product = product %}
{% assign current_collection = current_product.collections.first %}

{% if current_collection %}
<div class="similar-products">
  <h2 class="similar-products-heading" style="font-size: {{ section.settings.heading_font_size }}px; font-weight: {{ section.settings.heading_font_weight }};">
    Similar to <span id="product-title">{{ product.title }}</span>
  </h2>
  <div class="similar-products-container">
    <div class="similar-products-slider">
      {% for product in current_collection.products %}
        {% if product.id != current_product.id %}
          <div class="similar-product">
            <a href="{{ product.url }}" class="product-link">
              <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
              <h3 class="product-title">{{ product.title }}</h3>
              <p class="product-price">From {{ product.price | money }} exec VAT</p>
            </a>
            <form action="/cart/add" method="post" class="add-to-cart-form">
              <input type="hidden" name="id" value="{{ product.variants.first.id }}">
              <button type="submit" class="add-to-cart-button">Add to Cart</button>
            </form>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    <button class="slick-prev slick-arrow">
     <i class="fa-solid fa-chevron-left fa-2xs" style="color: #5c5c5c;"></i>
    </button>
    <button class="slick-next slick-arrow">
     <i class="fa-solid fa-chevron-right fa-2xs" style="color: #5c5c5c;"></i>
    </button>
  </div>
</div>
{% endif %}

<script>
  function updateTotal() {
  var quantity = parseInt(document.getElementById("Quantity").value);
  var priceText = document.querySelector('.product-price').textContent;
  var price = parseFloat(priceText.replace(/[^\d.]/g, '')) * 100; // Ensure price is in cents
  var total = quantity * price * 1000;
  document.getElementById("totalPrice").innerText = formatMoney(total, "{{ shop.money_format }}");
}

function increaseQuantity() {
  var quantityInput = document.getElementById("Quantity");
  var currentValue = parseInt(quantityInput.value);
  quantityInput.value = currentValue + 1;
  updateTotal();
}

function decreaseQuantity() {
  var quantityInput = document.getElementById("Quantity");
  var currentValue = parseInt(quantityInput.value);
  if (currentValue > 1) {
    quantityInput.value = currentValue - 1;
    updateTotal();
  }
}

document.addEventListener("DOMContentLoaded", function() {
  var product = {{ product | json }};

  document.querySelectorAll('.product-form__options input[type="radio"]').forEach(radio => {
    radio.addEventListener('change', () => {
      // find selected options
      var selectedOptions = [];
      document.querySelectorAll('.product-form__options input[type="radio"]:checked').forEach(checkedRadio => {
        selectedOptions.push(checkedRadio.value);
      });

      // finding match variant
      var matchedVariant = product.variants.find(variant => {
        var pass = true;
        for (var i = 0; i < selectedOptions.length; i++) {
          if (variant.options.indexOf(selectedOptions[i]) === -1) {
            pass = false;
            break;
          }
        }
        return pass;
      });

      // change product form id
      document.querySelector('#product_id').value = matchedVariant.id;
      // change url
      var url = new URL(window.location.href);
      url.searchParams.set('variant', matchedVariant.id);
      window.history.replaceState(null, null, url.toString());

      // change the prices
      document.querySelector('.product-price').textContent = formatMoney(matchedVariant.price, "{{ shop.money_format }}") + " exc VAT";
      updateTotal();

      // Update the main image
      var mainImage = document.getElementById('ProductPhotoImg');
      if (mainImage) {
        mainImage.src = matchedVariant.featured_image.src;
        mainImage.alt = matchedVariant.featured_image.alt;
      }

      // Update thumbnails
      var thumbnails = document.querySelectorAll('.product-thumbnails .thumbnail');
      thumbnails.forEach(thumbnail => {
        if (thumbnail.getAttribute('thumbnail-alt') === matchedVariant.featured_image.alt) {
          thumbnail.style.display = 'block';
        } else {
          thumbnail.style.display = 'none';
        }
      });
    });
  });

  // Initial total update
  updateTotal();

  // Handle thumbnail click
  document.querySelectorAll('.thumbnail').forEach(thumbnail => {
    thumbnail.addEventListener('click', function(event) {
      event.preventDefault();
      var mainImage = document.getElementById('ProductPhotoImg');
      if (mainImage) {
        mainImage.src = this.getAttribute('data-image');
        mainImage.alt = this.getAttribute('thumbnail-alt');
      }
    });
  });
});

// Function to format money
function formatMoney(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision); // Convert cents to dollars

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
}

// wishlist
$(document).ready(function() {
    var productId = '{{ product_id }}';
    var buttonElement = $('#wishlist-' + productId);

    buttonElement.click(function() {
      let currentState = localStorage.getItem("wishID-" + productId);
      
      if (currentState) {
        localStorage.removeItem("wishID-" + productId);
        buttonElement.removeClass('wishfillID');
      } else {
        localStorage.setItem("wishID-" + productId, JSON.stringify({
          id: productId,
          title: '{{ product.title }}',
          image: '{{ product.featured_image | image_url: width: 300, height: 300 }}',
          price: '{{ product.price | money }}',
          url: '{{ product.url }}'
        }));
        buttonElement.addClass('wishfillID');
      }
    });

    if (localStorage.getItem("wishID-" + productId)) {
      buttonElement.addClass('wishfillID');
    }
  });
</script>


{% schema %}
{
  "name": "Product",
  "settings": [
    {
        "type": "range",
        "id": "padding_top",
        "label": "Padding Top",
        "min": 5,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 5
    },
    {
        "type": "range",
        "id": "padding_bottom",
        "label": "Padding Bottom",
        "min": 5,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 5
    },
    {
      "type": "range",
      "id": "heading_font_size",
      "label": "Heading Font Size",
      "min": 12,
      "max": 36,
      "default": 24,
      "step": 1,
      "unit": "px"
    },
    {
      "type": "select",
      "id": "heading_font_weight",
      "label": "Heading Font Weight",
      "options": [
        {
          "value": "normal",
          "label": "Normal"
        },
        {
          "value": "bold",
          "label": "Bold"
        },
        {
          "value": "bolder",
          "label": "Bolder"
        },
        {
          "value": "lighter",
          "label": "Lighter"
        }
      ],
      "default": "bold"
    }
  ],
  "blocks": [
    {
      "type": "detail",
      "name": "Detail",
      "settings": [
        {
          "type": "text",
          "id": "detail_heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "product_details",
          "label": "Details"
        },
        {
          "type": "range",
          "id": "product_details_fontsize",
          "label": "Font Size",
          "min": 10,
          "max": 30,
          "step": 1,
          "unit": "px",
          "default": 14
        },
        {
          "type": "range",
          "id": "product_details_lineheight",
          "label": "Line Height",
          "min": 1,
          "max": 2,
          "step": 0.1,
          "default": 1.5
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product",
      "category": "Product"
    }
  ]
}
{% endschema %}

